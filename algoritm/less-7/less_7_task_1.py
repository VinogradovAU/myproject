# 1). Отсортируйте по убыванию методом пузырька одномерный целочисленный массив, заданный случайными числами
# на промежутке [-100; 100). Выведите на экран исходный и отсортированный массивы.
# Примечания:
# ● алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
# ● постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком.
# Улучшенные версии

import random
import timeit

mass = [i for i in range(-100, 100)]
random.shuffle(mass)
mass = mass[:10]
print(f'исходный массив: {mass}')
mass_2 = mass # копия массива

def puzyr_sort_1(mass):
    n = 1
    while n < len(mass):
        for i in range(len(mass) - 1):
            if mass[i] < mass[i + 1]:
                mass[i], mass[i + 1] = mass[i + 1], mass[i]
        n += 1

    return mass



def puzyr_sort_2(mass):  # оптимизированная функция
    n = 1
    while n < len(mass):
        for i in range(len(mass) - n):  # заменил 1 на n, чтобы не сравнивать то, что уже стоит на своем месте.
            if mass[i] < mass[i + 1]:
                mass[i], mass[i + 1] = mass[i + 1], mass[i]
        n += 1

    return mass
print(f'сортировка без оптимизации: {puzyr_sort_1(mass)}')
print(f'сортировка с оптимизацией: {puzyr_sort_2(mass_2)}')

print('*' * 50)
print(f"сортировка без оптимизации: {timeit.timeit('puzyr_sort_1(mass)', number=1000, globals=globals())}")
print(f"сортировка без оптимизации: {timeit.timeit('puzyr_sort_2(mass_2)', number=1000, globals=globals())}")

# исходный массив: [29, -88, -55, 90, -63, 61, 56, 63, 4, -89]
# сортировка без оптимизации: [90, 63, 61, 56, 29, 4, -55, -63, -88, -89]
# сортировка с оптимизацией: [90, 63, 61, 56, 29, 4, -55, -63, -88, -89]
# **************************************************
# сортировка без оптимизации: 0.012492700000000002
# сортировка без оптимизации: 0.008910599999999998