Задание 1
1. найдите информацию о том, как в Ubuntu открыть порт 80,443. Укажите как.
ezh@ezh-VirtualBox:~$ sudo ufw allow 80
Rule added
Rule added (v6)
ezh@ezh-VirtualBox:~$ sudo ufw allow 443
Rule added
Rule added (v6)
ezh@ezh-VirtualBox:~$ sudo ufw status verbose
Status: active
Logging: on (low)
Default: deny (incoming), allow (outgoing), disabled (routed)
New profiles: skip

To                         Action      From
--                         ------      ----
22                         ALLOW IN    Anywhere
80                         ALLOW IN    Anywhere
443                        ALLOW IN    Anywhere
22 (v6)                    ALLOW IN    Anywhere (v6)
80 (v6)                    ALLOW IN    Anywhere (v6)
443 (v6)                   ALLOW IN    Anywhere (v6)



2. Установить nginx, сконфигурировать свой виртуальный хост, используя порт 80, так, чтобы:
на запрос клиента с указанным и непустым хидером 'User'. отправлять код 200 с текстом "Hi $user!",
где $user - это значение хидера 'User'.
иначе отправлять код 404 с текстом "Page not found".

sudo apt install nginx

root@ezh-VirtualBox:/home/ezh# curl http://localhost
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
root@ezh-VirtualBox:/home/ezh#

root@ezh-VirtualBox:/home/ezh# nano /etc/nginx/conf.d/ezhhost.ru
root@ezh-VirtualBox:/home/ezh# nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful


root@ezh-VirtualBox:/home/ezh# curl -H "Host: ezhhost.ru" http://localhost
HTTP HOSTroot@ezh-VirtualBox:/home/ezh#

root@ezh-VirtualBox:/home/ezh# curl -H "Host: ezhhost.ru" http://localhost/admin
ADMINroot@ezh-VirtualBox:/home/ezh#

root@ezh-VirtualBox:/home/ezh# curl -H "Host: ezhhost.ru/admin" http://localhost
<html>
<head><title>400 Bad Request</title></head>
.....
.....

root@ezh-VirtualBox:/home/ezh# nano /etc/nginx/sites-enabled/default
server {
        listen 80;                 # удалил default_server т.к. указывает на вызов по дефолту а мне надо вызывать ezhhost.ru
        listen [::]:80;
.......

root@ezh-VirtualBox:/home/ezh# nano /etc/nginx/conf.d/ezhhost.ru
server {
        listen 80 default_server;         № добавил default_server и заработал ezhhost.ru , до этого работал только если указать его в хидере
        listen [::]:80 default_server;

        server_name ezhhost.ru;

        location / {

          if ($http_name != "Andry") {
                 return 404 "Page not found";
           }
                 return 200 "Hi $http_name";

        }


        location /admin {
          return 200 "ADMIN";
        }
}




root@ezh-VirtualBox:/home/ezh# curl http://localhost
Page not foundroot@ezh-VirtualBox:/home/ezh# curl -H "name: Andry" http://localhost
Hi Andryroot@ezh-VirtualBox:/home/ezh#

root@ezh-VirtualBox:/home/ezh# curl -H "name: Andry" http://localhost/admin
ADMINroot@ezh-VirtualBox:/home/ezh# curl http://localhost/admin
ADMINroot@ezh-VirtualBox:/home/ezh#

3. Мне прислать конфиг nginx и команду curl, которую выполняете.

конфиг был выше


Задание 2
1. найти информацию о том, что такое самоподписанные сертификаты и сгенерировать такой для своего вэб сервера.
Написать своими словами, что это такое и как сгенерить.
- Самоподписанный сертификат, - это сертификат , подписанный тем кто его создает, но не доверенным центром сертификации.

root@ezh-VirtualBox:/home/ezh/tmp# openssl req -newkey rsa:2048 -nodes -keyout domain.key -out domain.csr
Can't load /root/.rnd into RNG
139975493947840:error:2406F079:random number generator:RAND_load_file:Cannot open file:../crypto/rand/randfile.c:88:Filename=/root/.rnd
Generating a RSA private key
....+++++
.................................................................................................................+++++
writing new private key to 'domain.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:Rassia
string is too long, it needs to be no more than 2 bytes long
Country Name (2 letter code) [AU]:RF
State or Province Name (full name) [Some-State]:Moscow area
Locality Name (eg, city) []:Moscow
Organization Name (eg, company) [Internet Widgits Pty Ltd]:"RogaIkopyta"
Organizational Unit Name (eg, section) []:Roga
Common Name (e.g. server FQDN or YOUR name) []:RogaIkopyta
Email Address []:roga@kopyta.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:qwerty123456
An optional company name []:AGA
root@ezh-VirtualBox:/home/ezh/tmp# ls
domain.csr  domain.key

root@ezh-VirtualBox:/home/ezh/tmp# openssl x509 -signkey ./domain.key -in ./domain.csr -req -days 365 -out domain.crt
Signature ok
subject=C = RF, ST = Moscow area, L = Moscow, O = \"RogaIkopyta\", OU = Roga, CN = RogaIkopyta, emailAddress = roga@kopyta.com
Getting Private key
root@ezh-VirtualBox:/home/ezh/tmp# ls
domain.crt  domain.csr  domain.key



2. добавить SSL соединение для дифолтного виртуального хоста nginx, используя порт 443. Прикрепить конфиги nginx.

server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
         listen 443 ssl default_server;
         listen [::]:443 ssl default_server;

        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name _;
        ssl_certificate /home/ezh/tmp/domain.crt;
        ssl_certificate_key /home/ezh/tmp/domain.key;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }


3. откройте в браузере страницу хоста и посмотрите, как браузер реагирует на самоподписанные сертификаты. Напишите,
что видите.
- Виду что при обращении к вирт. хочту по https  что-то пошло не так. Буду разбираться.

4. мы говорили о необходимости шифровать симметрично. При этом проблем с получением ассиметричных сертификатов нет.
Зачем такая сложная схема для установления SSL соединения? Почему бы не шифровать ассиметрично? Своими словами.


- Симметричное шифрование требует наличие всего одного ключа для шифрования/дешифрования. Но безопасно передать его
при установлении соединения сложно. Тут на помощ приходит ассиметричное шифрование, когда приватный ключ остается на
сервере, никуда не передается, а публичный ключь можно передать открыто. Сторона принявшая публичный ключь, может зашифровать
ключь симметричного шифрования и передать обратно. Так сервер и клиент могут безопасно установить соединение, обменяться
ключами для симметричного шифрования сгенерированных для одной сессии. Ассиметричное шифрование медленее чем симметричное
и требует больше ресурсов.
