
в браузер буду писать запрос localhost/test1/ -----------> nginx ---------> uwsgi -----> wsgi.py--->вернет HELLO WORLD

------------Создаем сеть для контейнеров
-------ЗАПУСК
ezh@ezh-VirtualBox:~$ sudo ufw allow 81
ezh@ezh-VirtualBox:~$ sudo docker network create mynetwork
ezh@ezh-VirtualBox:~$ docker network inspect mynetwork
[
    {
        "Name": "mynetwork",
        "Id": "f4c399942323894ed6e10b1377d31dc866da7fb8e999b12177177fa224e3917c",
        "Created": "2020-03-29T22:19:35.027267078+03:00",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.18.0.0/16",
                    "Gateway": "172.18.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {},
        "Options": {},
        "Labels": {}
    }
]
ezh@ezh-VirtualBox:~$


--------------Контейнер с nginx----------------------------

Cezh@ezh-VirtualBox:~/project1/cont_nginx$ ls
Dockerfile  ezh.conf  uwsgi_params

-----Dockerfile
ezh@ezh-VirtualBox:~/project1/cont_nginx$ cat Do*
FROM nginx:alpine
WORKDIR /opt
RUN rm /etc/nginx/conf.d/default.conf
ADD ./ezh.conf /etc/nginx/conf.d/
RUN mkdir /etc/nginx/sites-enabled
RUN ln -s /etc/nginx/conf.d/ezh.conf /etc/nginx/sites-enabled/
#ADD ./uwsgi_params /etc/nginx/uwsgi_params
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
ezh@ezh-VirtualBox:~/project1/cont_nginx$

-------ezh.conf
server {
    listen       80;
    server_name  localhost;

location /test1 {

         #include /etc/nginx/uwsgi_params;
         proxy_pass http://172.18.0.3:81;
    }

ezh@ezh-VirtualBox:~$
ezh@ezh-VirtualBox:~/project1/cont_nginx$ docker build -t nginx .
....
... сделал билд
....


ezh@ezh-VirtualBox:~$ docker run --rm -t  --net mynetwork --name nginx -h nginx -p 80:80 nginx
ezh@ezh-VirtualBox:~$ docker network inspect mynetwork
[
    {
        "Name": "mynetwork",
        "Id": "f4c399942323894ed6e10b1377d31dc866da7fb8e999b12177177fa224e3917c",
        "Created": "2020-03-29T22:19:35.027267078+03:00",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.18.0.0/16",
                    "Gateway": "172.18.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "478d4ebaba18df600237088911fba7b9c0e2b4053c2335a5ac0c83f749e35bfc": {
                "Name": "nginx",
                "EndpointID": "bce22e876b018395e1b5c2960bb4714942ee6fe245e98d71aff7c28a8dc66d79",
                "MacAddress": "02:42:ac:12:00:02",
                "IPv4Address": "172.18.0.2/16",
                "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {}
    }
]
ezh@ezh-VirtualBox:~$

--------------Контейнер с uwsgi + wsgi.py ----------------------------
ezh@ezh-VirtualBox:~/project1/cont_app$ ls
Dockerfile  start.sh  uwsgi.ini  wsgi.py

ezh@ezh-VirtualBox:~/project1/cont_app$ cat Dockerfile
FROM python:3
WORKDIR /opt
RUN apt-get update
RUN apt-get install uwsgi -y
RUN apt-get install libpcre3 libpcre3-dev
RUN pip3 install uwsgi
RUN pip3 install django
RUN django-admin.py startproject mysite
COPY ./uwsgi.ini /etc/uwsgi/
COPY ./wsgi.py ./mysite/
COPY ./start.sh ./mysite/
CMD ["./mysite/start.sh"]
ezh@ezh-VirtualBox:~/project1/cont_app$ cat start.sh
#!/bin/bash
uwsgi --enable-threads --http :81 -b 32768 --post-buffering 8192 --wsgi-file /opt/mysite/wsgi.py


ezh@ezh-VirtualBox:~/project1/cont_app$ cat wsgi.py
#!/usr/bin/env python

def application(environ, start_response):
    start_response('200 OK', [('Content-Type', 'text/html')])
    return [b'Hello, world!']

ezh@ezh-VirtualBox:~/project1/cont_app$

ezh@ezh-VirtualBox:~/project1/cont_app$ docker build -t myapp .
Sending build context to Docker daemon   5.12kB
Step 1/12 : FROM python:3
 ---> f88b2f81f83a
Step 2/12 : WORKDIR /opt
 ---> Using cache
 ---> 5d5114112273
Step 3/12 : RUN apt-get update
 ---> Using cache
 ---> 3cb4657c4ef0
Step 4/12 : RUN apt-get install uwsgi -y
 ---> Using cache
 ---> a674e0cc66c2
Step 5/12 : RUN apt-get install libpcre3 libpcre3-dev
 ---> Using cache
 ---> a0cc40fb85e9
Step 6/12 : RUN pip3 install uwsgi
 ---> Using cache
 ---> f3eeb05febb0
Step 7/12 : RUN pip3 install django
 ---> Using cache
 ---> b44f120d54bc
Step 8/12 : RUN django-admin.py startproject mysite
 ---> Using cache
 ---> b2631f0f5fc5
Step 9/12 : COPY ./uwsgi.ini /etc/uwsgi/
 ---> Using cache
 ---> 4590ec5871e7
Step 10/12 : COPY ./wsgi.py ./mysite/
 ---> Using cache
 ---> 8bcf01482210
Step 11/12 : COPY ./start.sh ./mysite/
 ---> Using cache
 ---> adff5d9bb3c3
Step 12/12 : CMD ["./mysite/start.sh"]
 ---> Using cache
 ---> 70f31e0921d5
Successfully built 70f31e0921d5
Successfully tagged myapp:latest
ezh@ezh-VirtualBox:~/project1/cont_app$

--------------запуск

ezh@ezh-VirtualBox:~/project1/cont_app$ docker run --rm -ti --net mynetwork --name myapp -h myapp  -p 81:81 myapp
*** Starting uWSGI 2.0.18 (64bit) on [Sun Mar 29 20:52:56 2020] ***
compiled with version: 8.3.0 on 28 March 2020 23:38:17
os: Linux-5.3.0-42-generic #34~18.04.1-Ubuntu SMP Fri Feb 28 13:42:26 UTC 2020
nodename: myapp
machine: x86_64
clock source: unix
pcre jit disabled
detected number of CPU cores: 2
current working directory: /opt
detected binary path: /usr/local/bin/uwsgi
uWSGI running as root, you can use --uid/--gid/--chroot options
*** WARNING: you are running uWSGI as root !!! (use the --uid flag) ***
*** WARNING: you are running uWSGI without its master process manager ***
your memory page size is 4096 bytes
detected max file descriptor number: 1048576
lock engine: pthread robust mutexes
thunder lock: disabled (you can enable it with --thunder-lock)
uWSGI http bound on :81 fd 4
spawned uWSGI http 1 (pid: 8)
uwsgi socket 0 bound to TCP address 127.0.0.1:46273 (port auto-assigned) fd 3
uWSGI running as root, you can use --uid/--gid/--chroot options
*** WARNING: you are running uWSGI as root !!! (use the --uid flag) ***
Python version: 3.8.2 (default, Feb 26 2020, 14:58:38)  [GCC 8.3.0]
Python main interpreter initialized at 0x5651de6df650
uWSGI running as root, you can use --uid/--gid/--chroot options
*** WARNING: you are running uWSGI as root !!! (use the --uid flag) ***
python threads support enabled
your server socket listen backlog is limited to 100 connections
your mercy for graceful operations on workers is 60 seconds
mapped 109784 bytes (107 KB) for 1 cores
*** Operational MODE: single process ***
WSGI app 0 (mountpoint='') ready in 0 seconds on interpreter 0x5651de6df650 pid: 7 (default app)
uWSGI running as root, you can use --uid/--gid/--chroot options
*** WARNING: you are running uWSGI as root !!! (use the --uid flag) ***
*** uWSGI is running in multiple interpreter mode ***
spawned uWSGI worker 1 (and the only) (pid: 7, cores: 1)
[pid: 7|app: 0|req: 1/1] 172.18.0.2 () {38 vars in 598 bytes} [Sun Mar 29 20:53:29 2020] GET /test1/ => generated 13 bytes in 0 msecs (HTTP/1.0 200) 1 headers in 44 bytes (1 switches on core 0)
[pid: 7|app: 0|req: 2/2] 172.18.0.1 () {38 vars in 589 bytes} [Sun Mar 29 20:53:32 2020] GET / => generated 13 bytes in 0 msecs (HTTP/1.1 200) 1 headers in 44 bytes (1 switches on core 0)
[pid: 7|app: 0|req: 3/3] 172.18.0.2 () {38 vars in 598 bytes} [Sun Mar 29 20:53:39 2020] GET /test1/ => generated 13 bytes in 0 msecs (HTTP/1.0 200) 1 headers in 44 bytes (1 switches on core 0)



nginx дает ----------

ezh@ezh-VirtualBox:~/project1/cont_nginx$ docker run --rm -t  --net mynetwork --name nginx -h nginx -p 80:80 nginx
172.18.0.1 - - [29/Mar/2020:20:53:29 +0000] "GET /test1/ HTTP/1.1" 200 23 "-" "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:74.0) Gecko/20100101 Firefox/74.0" "-"
172.18.0.1 - - [29/Mar/2020:20:53:39 +0000] "GET /test1/ HTTP/1.1" 200 23 "-" "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:74.0) Gecko/20100101 Firefox/74.0" "-"

-------------вывод состояния сети контейнеров

ezh@ezh-VirtualBox:~$ docker network inspect mynetwork
[
    {
        "Name": "mynetwork",
        "Id": "f4c399942323894ed6e10b1377d31dc866da7fb8e999b12177177fa224e3917c",
        "Created": "2020-03-29T22:19:35.027267078+03:00",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.18.0.0/16",
                    "Gateway": "172.18.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "e6aa52e831895ee29c5999fb6ef8c5cc327de272a809fe2566cd3627b0bec5c7": {
                "Name": "nginx",
                "EndpointID": "69b85fa697aacc94d6a00359add6d85e32f33b2d6929298bf9d45bc696e49f90",
                "MacAddress": "02:42:ac:12:00:02",
                "IPv4Address": "172.18.0.2/16",
                "IPv6Address": ""
            },
            "f9c76585245d2f074607d487120a31825fe862c1a378ba2119e104010ddb0a82": {
                "Name": "myapp",
                "EndpointID": "5ea147ba80ca91e64c3934e1884533f2c6a6851c62ce14d3bf15bdc20fa9685e",
                "MacAddress": "02:42:ac:12:00:03",
                "IPv4Address": "172.18.0.3/16",
                "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {}
    }
]
ezh@ezh-VirtualBox:~$



